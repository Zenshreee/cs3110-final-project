Installation instructions


Here’s what we’re going to install:

1. A Unix development environment
2. OPAM, the OCaml Package Manager
3. An OPAM switch with the OCaml compiler and some packages
4. The Visual Studio Code editor, with OCaml support


1. Unix Development Environment

    a. Linux: If you’re already running Linux, you’re done with this step. Proceed to Install OPAM, below.

    b. Mac: 
        Beneath the surface, macOS is already a Unix-based OS. But you’re going to need some developer tools and a Unix package manager. There are two to pick from: Homebrew and MacPorts. From the perspective of this textbook and CS 3110, it doesn’t matter which you choose:
    
        - If you’re already accustomed to one, feel free to keep using it. Make     sure to run its update command before continuing with these instructions.
        - Otherwise, pick one and follow the installation instructions on its website. The installation process for Homebrew is typically easier and faster, which might nudge you in that direction. If you do choose MacPorts, make sure to follow all the detailed instructions on its page, including XCode and an X11 server. Do not install both Homebrew and MacPorts; they aren’t meant to co-exist. If you change your mind later, make sure to uninstall one before installing the other.

        After you’ve finished installing/updating either Homebrew or MacPorts, proceed to Install OPAM, below.

    c. Windows: Unix development in Windows is made possible by the Windows     Subsystem for Linux (WSL). If you have a recent version of Windows (build 20262, released November 2020, or newer), WSL is easy to install. If you don’t have that recent of a version, try running Windows Update to get it.

        With a recent version of Windows, and assuming you’ve never installed WSL before, here’s all you have to do:

        Open Windows PowerShell as Administrator. To do that, click Start, type PowerShell, and it should come up as the best match. Click “Run as Administrator”, and click Yes to allow changes.

        Run wsl --install. (Or, if you have already installed WSL but not Ubuntu before, then instead run wsl --install -d Ubuntu.) When the Ubuntu download is completed, it will likely ask you to reboot. Do so. The installation will automatically resume after the reboot.

        You will be prompted to create a Unix username and password. You can use any username and password you wish. It has no bearing on your Windows username and password (though you are free to re-use those). Do not put a space in your username. Do not forget your password. You will need it in the future.

        Ubuntu setup: These rest of these instructions assume that you installed Ubuntu (20.04) as the Linux distribution. That is the default distribution in WSL. In principle other distributions should work, but might require different commands from this point forward.

            Open the Ubuntu app. (It might already be open if you just finished installing WSL.) You will be at the Bash prompt, which looks something like this:
            
            Enable copy-and-paste:

            - Click on the Ubuntu icon on the top left of the window.
            - Click Properties
            - Make sure “Use Ctrl+Shift+C/V as Copy/Paste” is checked.
        
        Now Ctrl+Shift+C will copy and Ctrl+Shift+V will paste into the terminal. Note that you have to include Shift as part of that keystroke.

        Run the following command to update the APT package manager, which is what helps to install Unix packages: sudo apt update

        You will be prompted for the Unix password you chose. The prefix sudo means to run the command as the administrator, aka “super user”. In other words, do this command as super user, hence, “sudo”.

        Now run this command to upgrade all the APT software packages: sudo apt upgrade -y

        Then install some useful packages that we will need: sudo apt install -y zip unzip build-essential
        
        File Systems. WSL has its own filesystem that is distinct from the Windows file system, though there are ways to access each from the other.

            - When you launch Ubuntu and get the $ prompt, you are in the WSL file system. Your home directory there is named ~, which is a built-in alias for /home/your_ubuntu_user_name. You can run explorer.exe . (note the dot at the end of that) to open your Ubuntu home directory in Windows explorer.
            - From Ubuntu, you can access your Windows home directory at the path /mnt/c/Users/your_windows_user_name/.
            - From Windows Explorer, you can access your Ubuntu home directory under the Linux icon in the left-hand list (near “This PC” and “Network”), then navigating to Ubuntu → home → your_ubuntu_user_name. Or you can go there directly by typing into the Windows Explorer path bar: \\wsl$\Ubuntu\home\your_ubuntu_user_name.
            
        Practice accessing your Ubuntu and Windows home directories now, and make sure you can recognize which you are in. For advanced information, see Microsoft’s guide to Windows and Linux file systems.

        We recommend storing your OCaml development work in your Ubuntu home directory, not your Windows home directory. By implication, Microsoft also recommends that in the guide just linked.      

2. Install OPAM

    a. Linux: Follow the instructions https://opam.ocaml.org/doc/Install.html
    
    b. Mac: If you’re using Homebrew, run this command:

            brew install opam

            If you’re using MacPorts, run this command:

            sudo port install opam

    c. Windows: Run this command from Ubuntu:
            
            sudo apt install opam
            
    Run "opam init --bare -a -y" to initialize OPAM
    
3. Create an OPAM switch by running the following commands:
    1. Run this command:
        opam switch create <name> ocaml-base-compiler.5.0.0

        (Tip: If that command fails saying that the 5.0.0 compiler can’t be found, you 
              probably installed OPAM sometime back in the past and now need to update it. 
              Do so with opam update.)
    
    2. Now we need to make sure your OCaml environment was configured correctly. 
    Logout from your OS (or just reboot). Then re-open your terminal and run this command:
    opam switch list

    This should get an output like this:

#  switch         compiler                    description
→  __Name__      ocaml-base-compiler.5.0.0  __description__

    3. opam install -y utop odoc ounit2 qcheck bisect_ppx menhir ocaml-lsp-server ocamlformat ocamlformat-rpc

    